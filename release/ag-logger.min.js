!function(){"use strict";angular.module("agLogger",[])}(),function(){"use strict";function e(){function e(e){function r(){return f.name}function u(){m.setLogLevel(l.ALL.name)}function L(){m.setLogLevel(l.OFF.name)}function t(e){var l=n(e);return l.value>=f.value}function g(e){f=n(e),i()}function i(){m.error=v(e.error,l.ERROR),m.warn=v(e.warn,l.WARN),m.info=v(e.info,l.INFO),m.log=v(e.log,l.LOG),m.debug=v(e.debug,l.DEBUG)}function v(e,n){return m.willLog(n.name)?function(){var l=Array.prototype.slice.call(arguments);angular.isString(l[0])&&(l[0]=n.logLabel+"|"+l[0]),e.apply(null,l)}:angular.noop}var f=null,m={};return m.LOG_LEVELS=a,m.enableAll=u,m.disableAll=L,m.setLogLevel=g,m.getLogLevel=r,m.willLog=t,m.setLogLevel(o.name),m}var o=l.ALL,r={};return r.LOG_LEVELS=a,r.enableAll=function(){o=l.ALL},r.disableAll=function(){o=l.OFF},r.setLogLevel=function(e){o=n(e)},r.getLogLevel=function(){return o.name},r.$get=e,r.$get.$inject=["$log"],r}function n(e){if(null==e)throw new Error("Provided logLevelName cannot be null!");var n=null;if(angular.forEach(l,function(a,o){a.name===e&&(n=l[o])}),null==n)throw new Error("Invalid log level name provided: "+e);return n}angular.module("agLogger").provider("agLogger",e);var l={OFF:{name:"off",value:6},ERROR:{name:"error",value:5,logLabel:"ERR  "},WARN:{name:"warn",value:4,logLabel:"WARN  "},INFO:{name:"info",value:3,logLabel:"INFO "},LOG:{name:"log",value:2,logLabel:"LOG "},DEBUG:{name:"debug",value:1,logLabel:"DEBUG"},ALL:{name:"all",value:0}},a={OFF:l.OFF.name,ERROR:l.ERROR.name,WARN:l.WARN.name,INFO:l.INFO.name,LOG:l.LOG.name,DEBUG:l.DEBUG.name,ALL:l.ALL.name}}();